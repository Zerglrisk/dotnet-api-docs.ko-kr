<Type Name="AttributeUsageAttribute" FullName="System.AttributeUsageAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="26912982a56d71f0f38a05b7ede7327988b3b43a" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56374611" /></Metadata><TypeSignature Language="C#" Value="public sealed class AttributeUsageAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit AttributeUsageAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.AttributeUsageAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AttributeUsageAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class AttributeUsageAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type AttributeUsageAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="bd999-101">다른 특성 클래스의 사용을 지정합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-101">Specifies the usage of another attribute class.</span></span> <span data-ttu-id="bd999-102">이 클래스는 상속될 수 없습니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd999-103">고유한 특성 클래스를 정의 하는 배치 하 여에 사용 되는 방식으로 제어할 수 있습니다는 <xref:System.AttributeUsageAttribute> 특성 클래스에 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-103">When you are defining your own attribute class, you can control the manner in which it is used by placing an <xref:System.AttributeUsageAttribute> on your attribute class.</span></span> <span data-ttu-id="bd999-104">표시 된 특성 클래스에서 파생 되어야 합니다 <xref:System.Attribute>를 직접 또는 간접적으로 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-104">The indicated attribute class must derive from <xref:System.Attribute>, either directly or indirectly.</span></span>  
  
 <span data-ttu-id="bd999-105">위치 인수와 명명 된 매개 변수가 포함 하는 특성 클래스.</span><span class="sxs-lookup"><span data-stu-id="bd999-105">Attribute classes have positional and named parameters.</span></span> <span data-ttu-id="bd999-106">각 public 생성자를 특성 클래스에 대 한 올바른 시퀀스로 해당 클래스에 대 한 위치 매개 변수를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-106">Each public constructor for an attribute class defines a valid sequence of positional parameters for that class.</span></span> <span data-ttu-id="bd999-107">명명 된 매개 변수는 static이 아니고, 공용 및 읽기-쓰기 필드 또는 특성 클래스의 속성으로 정의 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-107">Named parameters are defined by the non-static, public, and read-write fields or properties of the attribute class.</span></span>  
  
 <span data-ttu-id="bd999-108">세 가지 속성 <xref:System.AttributeUsageAttribute> 다음 매개 변수를 정의 하 여 설정 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-108">The three properties of <xref:System.AttributeUsageAttribute> are set by defining the following parameters:</span></span>  
  
-   <xref:System.AttributeUsageAttribute.ValidOn%2A>  
  
 <span data-ttu-id="bd999-109">이 위치 매개 변수에서 지정한 특성을 지정할 수 있는 프로그램 요소를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-109">This positional parameter specifies the program elements that the indicated attribute can be placed on.</span></span> <span data-ttu-id="bd999-110">특성에 배치할 수 있는 사용 가능한 모든 요소 집합에 나열 된는 <xref:System.AttributeTargets> 열거형입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-110">The set of all possible elements that you can place an attribute on is listed in the <xref:System.AttributeTargets> enumeration.</span></span> <span data-ttu-id="bd999-111">몇 가지를 결합할 수 있습니다 <xref:System.AttributeTargets> 원하는 조합을 올바른 프로그램 요소를 비트 OR 연산을 사용 하 여 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-111">You can combine several <xref:System.AttributeTargets> values using a bitwise OR operation to get the desired combination of valid program elements.</span></span>  
  
-   <xref:System.AttributeUsageAttribute.AllowMultiple%2A>  
  
 <span data-ttu-id="bd999-112">이 명명 된 매개 변수 지정에 표시 된 특성이 있는지 여부 지정된 된 프로그램 요소에 한 번 이상 지정할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-112">This named parameter specifies whether the indicated attribute can be specified more than once for a given program element.</span></span>  
  
-   <xref:System.AttributeUsageAttribute.Inherited%2A>  
  
 <span data-ttu-id="bd999-113">이 명명 된 매개 변수 파생 된 클래스 및 멤버를 재정의할 표시 된 특성을 상속할 수 있는지 여부를 지정 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-113">This named parameter specifies whether the indicated attribute can be inherited by derived classes and overriding members.</span></span>  
  
 <span data-ttu-id="bd999-114">특성을 사용 하는 방법에 대 한 자세한 내용은 참조 하세요. <xref:System.Attribute> 하 고 [특성](~/docs/standard/attributes/index.md)합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-114">For more information about using attributes, see <xref:System.Attribute> and [Attributes](~/docs/standard/attributes/index.md).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Attribute" />
    <altmember cref="T:System.AttributeTargets" />
    <related type="Article" href="~/docs/standard/attributes/index.md"><span data-ttu-id="bd999-115">특성을 사용하여 메타데이터 확장</span><span class="sxs-lookup"><span data-stu-id="bd999-115">Extending Metadata Using Attributes</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AttributeUsageAttribute (AttributeTargets validOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.AttributeTargets validOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (validOn As AttributeTargets)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AttributeUsageAttribute(AttributeTargets validOn);" />
      <MemberSignature Language="F#" Value="new AttributeUsageAttribute : AttributeTargets -&gt; AttributeUsageAttribute" Usage="new System.AttributeUsageAttribute validOn" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="validOn" Type="System.AttributeTargets" />
      </Parameters>
      <Docs>
        <param name="validOn"><span data-ttu-id="bd999-116">올바른 프로그램 요소임을 나타내도록 비트 OR 연산을 사용하여 결합된 값 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-116">The set of values combined using a bitwise OR operation to indicate which program elements are valid.</span></span></param>
        <summary><span data-ttu-id="bd999-117">지정된 <see cref="T:System.AttributeUsageAttribute" /> 목록, <see cref="T:System.AttributeTargets" /> 값 및 <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> 값을 사용하여 <see cref="P:System.AttributeUsageAttribute.Inherited" /> 클래스의 새 인스턴스를 초기화합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-117">Initializes a new instance of the <see cref="T:System.AttributeUsageAttribute" /> class with the specified list of <see cref="T:System.AttributeTargets" />, the <see cref="P:System.AttributeUsageAttribute.AllowMultiple" /> value, and the <see cref="P:System.AttributeUsageAttribute.Inherited" /> value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd999-118">몇 가지를 결합할 수 있습니다 <xref:System.AttributeTargets> 원하는 조합을 올바른 프로그램 요소를 비트 OR 연산을 사용 하 여 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-118">You can combine several <xref:System.AttributeTargets> values using a bitwise OR operation to get the desired combination of valid program elements.</span></span>  
  
 <span data-ttu-id="bd999-119">기본 속성 값에 대 한 참조를 <xref:System.AttributeUsageAttribute.ValidOn%2A>, <xref:System.AttributeUsageAttribute.AllowMultiple%2A>, 및 <xref:System.AttributeUsageAttribute.Inherited%2A> 속성입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-119">For default property values, see the <xref:System.AttributeUsageAttribute.ValidOn%2A>, <xref:System.AttributeUsageAttribute.AllowMultiple%2A>, and <xref:System.AttributeUsageAttribute.Inherited%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd999-120">DispId 특성의 정의는 몇 가지를 결합 하는 비트 OR 연산의 사용 방법을 보여 줍니다. <xref:System.AttributeTargets> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-120">The definition of the DispId attribute illustrates the use of a bitwise OR operation to combine several <xref:System.AttributeTargets> values.</span></span>  
  
 [!code-cpp[Classic AttributeUsageAttribute.AttributeUsageAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic AttributeUsageAttribute.AttributeUsageAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic AttributeUsageAttribute.AttributeUsageAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic AttributeUsageAttribute.AttributeUsageAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic AttributeUsageAttribute.AttributeUsageAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic AttributeUsageAttribute.AttributeUsageAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.AttributeTargets" />
      </Docs>
    </Member>
    <Member MemberName="AllowMultiple">
      <MemberSignature Language="C#" Value="public bool AllowMultiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultiple" />
      <MemberSignature Language="DocId" Value="P:System.AttributeUsageAttribute.AllowMultiple" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowMultiple As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowMultiple { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowMultiple : bool with get, set" Usage="System.AttributeUsageAttribute.AllowMultiple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd999-121">표시된 특성의 인스턴스가 하나의 프로그램 요소에 여러 개 지정될 수 있는지 여부를 나타내는 부울 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-121">Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</span></span></summary>
        <value><span data-ttu-id="bd999-122">여러 개의 인스턴스가 지정될 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-122"><see langword="true" /> if more than one instance is allowed to be specified; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="bd999-123">기본값은 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-123">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd999-124">프로그램 요소에 대 한 번 이상 지정할 수 있는 특성이 다중 사용 특성을 이라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-124">An attribute that can be specified more than once for a program element is called a multi-use attribute.</span></span> <span data-ttu-id="bd999-125">한 번만 지정할 수 있는 특성에는 1 회용 특성을 이라고 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-125">An attribute that can be specified only once is called a single-use attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Attribute" />
      </Docs>
    </Member>
    <Member MemberName="Inherited">
      <MemberSignature Language="C#" Value="public bool Inherited { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inherited" />
      <MemberSignature Language="DocId" Value="P:System.AttributeUsageAttribute.Inherited" />
      <MemberSignature Language="VB.NET" Value="Public Property Inherited As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Inherited { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Inherited : bool with get, set" Usage="System.AttributeUsageAttribute.Inherited" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd999-126">지정된 특성이 파생된 클래스에서 상속되고 멤버를 재정의하는지 여부를 결정하는 <see cref="T:System.Boolean" /> 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-126">Gets or sets a <see cref="T:System.Boolean" /> value that determines whether the indicated attribute is inherited by derived classes and overriding members.</span></span></summary>
        <value><span data-ttu-id="bd999-127">지정된 특성이 파생된 클래스에서 상속되고 멤버를 재정의할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-127"><see langword="true" /> if the attribute can be inherited by derived classes and overriding members; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="bd999-128">기본값은 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-128">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bd999-129"><xref:System.AttributeUsageAttribute.Inherited%2A> 속성을 결정 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-129">The <xref:System.AttributeUsageAttribute.Inherited%2A> property determines:</span></span>  
  
-   <span data-ttu-id="bd999-130">특성을 사용 하 여 태그를 지정 하는지 여부를 기본 클래스에서 파생 된 클래스는 <xref:System.AttributeUsageAttribute> 특성이 적용 되는 특성을 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-130">Whether classes derived from a base class tagged with the attribute to which the <xref:System.AttributeUsageAttribute> attribute is applied inherit that attribute.</span></span>  
  
-   <span data-ttu-id="bd999-131">특성을 사용 하 여 태그가 지정 된 메서드의 기본 클래스 메서드를 재정의 하는 클래스를 파생 하는 여부는 <xref:System.AttributeUsageAttribute> 특성이 적용 되는 특성을 상속 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-131">Whether methods of derived classes that override a base class method tagged with the attribute to which the <xref:System.AttributeUsageAttribute> attribute is applied inherit that attribute.</span></span>  <span data-ttu-id="bd999-132">(기본 클래스 멤버를 상속 하는 클래스도 상속 해당 멤버에 적용 되는 모든 특성.)</span><span class="sxs-lookup"><span data-stu-id="bd999-132">(If a class inherits a base class member, it also inherits any attributes applied to that member.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bd999-133">다음 예제는 특성 간의 차이점을 보여 줍니다.는 <xref:System.AttributeUsageAttribute> 특성을 <xref:System.AttributeUsageAttribute.Inherited%2A> 속성 값 `true` 적용 되 고 다른 하나는 <xref:System.AttributeUsageAttribute> 특성과 <xref:System.AttributeUsageAttribute.Inherited%2A> 속성 값 `false` 적용 됩니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-133">The following example illustrates the difference between an attribute to which an <xref:System.AttributeUsageAttribute> attribute with an <xref:System.AttributeUsageAttribute.Inherited%2A> property value of `true` is applied and one to which  <xref:System.AttributeUsageAttribute> attribute with an <xref:System.AttributeUsageAttribute.Inherited%2A> property value of `false` is applied .</span></span> <span data-ttu-id="bd999-134">이 예제에서는 두 가지 특성을 정의 `InheritedAttribute` 고 `NotInheritedAttribute`입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-134">The example defines two attributes, `InheritedAttribute` and `NotInheritedAttribute`.</span></span> <span data-ttu-id="bd999-135">두 특성 클래스 및 메서드를 적용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-135">Both attributes can apply to classes and methods.</span></span> <span data-ttu-id="bd999-136">때문에 <xref:System.AttributeUsageAttribute.Inherited%2A> 의 속성을 <xref:System.AttributeUsageAttribute> 에 적용 된 특성 `InheritedAttribute` 는 `true`, 파생된 클래스에서 상속 된 및의 멤버는 기본 클래스 메서드를 재정의 하는 클래스를 파생 합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-136">Because the <xref:System.AttributeUsageAttribute.Inherited%2A> property of the <xref:System.AttributeUsageAttribute> attribute applied to `InheritedAttribute` is `true`, it is inherited by derived classes and the members of derived classes that override the base class method.</span></span>  <span data-ttu-id="bd999-137">반면에 때문에 <xref:System.AttributeUsageAttribute.Inherited%2A> 의 속성을 <xref:System.AttributeUsageAttribute> 에 적용 된 특성 `NotInheritedAttribute` 는 `false`, 파생된 클래스에서 상속 되지 않습니다 및 파생 된 기본 클래스 메서드를 재정의 하는 클래스의 멤버.</span><span class="sxs-lookup"><span data-stu-id="bd999-137">On the other hand, because the <xref:System.AttributeUsageAttribute.Inherited%2A> property of the <xref:System.AttributeUsageAttribute> attribute applied to `NotInheritedAttribute` is `false`, it is not inherited by derived classes and the members of derived classes that override the base class method.</span></span>  
  
 [!code-csharp[System.AttributeUsageAttribute.Inherited#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AttributeUsageAttribute.Inherited/cs/Inherited1.cs#1)]
 [!code-vb[System.AttributeUsageAttribute.Inherited#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AttributeUsageAttribute.Inherited/vb/Inherited1.vb#1)]  
  
 <span data-ttu-id="bd999-138">다음 예제에서는 두 기본 클래스를 정의합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-138">The example then defines two  base classes.</span></span> <span data-ttu-id="bd999-139">첫 번째 `BaseA`, 단일 메서드가 `MethodA`합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-139">The first, `BaseA`, has a single method, `MethodA`.</span></span>  <span data-ttu-id="bd999-140">두 번째 `BaseB`, 단일 메서드가 `MethodB`합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-140">The second, `BaseB`, has a single method, `MethodB`.</span></span> <span data-ttu-id="bd999-141">`BaseA` 및 `MethodA` 로 태그가 지정 되어 합니다 `InheritedAttribute` 특성 및 `BaseB` 및 `MethodB` 로 태그가 지정 되어를 `NotInheritedAttribute` 특성입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-141">`BaseA` and `MethodA` are tagged with the `InheritedAttribute` attribute, and `BaseB` and `MethodB` are tagged with the `NotInheritedAttribute` attribute.</span></span> <span data-ttu-id="bd999-142">`DerivedA` 상속 `BaseA` 재정의 및 해당 `MethodA` 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd999-142">`DerivedA` inherits from `BaseA` and overrides its `MethodA` method.</span></span> <span data-ttu-id="bd999-143">`DerivedB` 상속 `BaseB` 재정의 및 해당 `MethodB` 메서드.</span><span class="sxs-lookup"><span data-stu-id="bd999-143">`DerivedB` inherits from `BaseB` and overrides its `MethodB` method.</span></span>  
  
 [!code-csharp[System.AttributeUsageAttribute.Inherited#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.AttributeUsageAttribute.Inherited/cs/Inherited1.cs#2)]
 [!code-vb[System.AttributeUsageAttribute.Inherited#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.AttributeUsageAttribute.Inherited/vb/Inherited1.vb#2)]  
  
 <span data-ttu-id="bd999-144">예제에서 출력으로 `DerivedA` 및 `DerivedA.MethodA` 상속을 `InheritedAttribute` 특성인 있지만 `DerivedB` 및 `DerivedB.MethodB` 상속 하지 않습니다는 `NotInheritedAttribute` 특성.</span><span class="sxs-lookup"><span data-stu-id="bd999-144">As the output from the example shows, `DerivedA` and `DerivedA.MethodA` inherit the `InheritedAttribute` attribute, but `DerivedB` and `DerivedB.MethodB` do not inherit the `NotInheritedAttribute` attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Attribute" />
      </Docs>
    </Member>
    <Member MemberName="ValidOn">
      <MemberSignature Language="C#" Value="public AttributeTargets ValidOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.AttributeTargets ValidOn" />
      <MemberSignature Language="DocId" Value="P:System.AttributeUsageAttribute.ValidOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidOn As AttributeTargets" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property AttributeTargets ValidOn { AttributeTargets get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidOn : AttributeTargets" Usage="System.AttributeUsageAttribute.ValidOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AttributeTargets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bd999-145">표시된 특성이 적용될 수 있는 프로그램 요소를 식별하는 값을 가져오거나 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-145">Gets a set of values identifying which program elements that the indicated attribute can be applied to.</span></span></summary>
        <value><span data-ttu-id="bd999-146">하나 또는 여러 개의 <see cref="T:System.AttributeTargets" /> 값입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-146">One or several <see cref="T:System.AttributeTargets" /> values.</span></span> <span data-ttu-id="bd999-147">기본값은 <see langword="All" />입니다.</span><span class="sxs-lookup"><span data-stu-id="bd999-147">The default is <see langword="All" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.AttributeTargets" />
      </Docs>
    </Member>
  </Members>
</Type>