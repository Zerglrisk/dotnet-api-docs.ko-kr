<Type Name="ImmutableInterlocked" FullName="System.Collections.Immutable.ImmutableInterlocked">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f837421c8b854fd54f19bef873705daf52fc6570" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56378775" /></Metadata><TypeSignature Language="C#" Value="public static class ImmutableInterlocked" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ImmutableInterlocked extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.ImmutableInterlocked" />
  <TypeSignature Language="VB.NET" Value="Public Class ImmutableInterlocked" />
  <TypeSignature Language="C++ CLI" Value="public ref class ImmutableInterlocked abstract sealed" />
  <TypeSignature Language="F#" Value="type ImmutableInterlocked = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="6440d-101">변경할 수 없는 컬렉션에 대한 연동된 교환 메커니즘을 포함합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-101">Contains interlocked exchange mechanisms for immutable collections.</span></span>  
  
 <span data-ttu-id="6440d-102">**NuGet 패키지**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>(<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">변경할 수 없는 컬렉션 정보 및 설치 방법</see>)</span><span class="sxs-lookup"><span data-stu-id="6440d-102">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>To be added.</remarks>
    <threadsafe><span data-ttu-id="6440d-103">이 형식은 스레드로부터 안전합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-103">This type is thread safe.</span></span></threadsafe>
  </Docs>
  <Members>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; addValueFactory, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; addValueFactory, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ addValueFactory, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate :  * 'Key * Func&lt;'Key, 'Value&gt; * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValueFactory, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="location"><span data-ttu-id="6440d-104">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-104">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="6440d-105">추가하거나 업데이트할 값의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-105">The key for the value to add or update.</span></span></param>
        <param name="addValueFactory"><span data-ttu-id="6440d-106">키를 받고 이전 값이 없는 경우 사전에 추가할 새 값을 반환하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-106">The function that receives the key and returns a new value to add to the dictionary when no value previously exists.</span></span></param>
        <param name="updateValueFactory"><span data-ttu-id="6440d-107">키와 이전 값을 받고 사전을 업데이트할 새 값을 반환하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-107">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span></span></param>
        <summary><span data-ttu-id="6440d-108">값을 추가하거나 기존 항목을 업데이트한 후 사전에서 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-108">Obtains the value from a dictionary after having added it or updated an existing entry.</span></span></summary>
        <returns><span data-ttu-id="6440d-109">추가되거나 업데이트된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-109">The added or updated value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue AddOrUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue addValue, Func&lt;TKey,TValue,TValue&gt; updateValueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue AddOrUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue addValue, class System.Func`3&lt;!!TKey, !!TValue, !!TValue&gt; updateValueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddOrUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue AddOrUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue addValue, Func&lt;TKey, TValue, TValue&gt; ^ updateValueFactory);" />
      <MemberSignature Language="F#" Value="static member AddOrUpdate :  * 'Key * 'Value * Func&lt;'Key, 'Value, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate (location, key, addValue, updateValueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="addValue" Type="TValue" />
        <Parameter Name="updateValueFactory" Type="System.Func&lt;TKey,TValue,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">To be added.</typeparam>
        <typeparam name="TValue">To be added.</typeparam>
        <param name="location"><span data-ttu-id="6440d-110">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-110">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="6440d-111">추가하거나 업데이트할 값의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-111">The key for the value to add or update.</span></span></param>
        <param name="addValue"><span data-ttu-id="6440d-112">이전 값이 없는 경우에 사용할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-112">The value to use if no previous value exists.</span></span></param>
        <param name="updateValueFactory"><span data-ttu-id="6440d-113">키와 이전 값을 받고 사전을 업데이트할 새 값을 반환하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-113">The function that receives the key and prior value and returns the new value with which to update the dictionary.</span></span></param>
        <summary><span data-ttu-id="6440d-114">값을 추가하거나 기존 항목을 업데이트한 후 사전에서 값을 가져옵니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-114">Obtains the value from a dictionary after having added it or updated an existing entry.</span></span></summary>
        <returns><span data-ttu-id="6440d-115">추가되거나 업데이트된 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-115">The added or updated value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enqueue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Enqueue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Enqueue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Enqueue(Of T) (ByRef location As ImmutableQueue(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Enqueue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Enqueue :  * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Enqueue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6440d-116">컬렉션에 포함된 항목의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-116">The type of items contained in the collection</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-117">원자적으로 업데이트할 변수 또는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-117">The variable or field to atomically update.</span></span></param>
        <param name="value"><span data-ttu-id="6440d-118">큐에 넣을 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-118">The value to enqueue.</span></span></param>
        <summary><span data-ttu-id="6440d-119">원자적으로 큐의 끝에 요소를 넣습니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-119">Atomically enqueues an element to the end of a queue.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TValue&gt; valueFactory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`2&lt;!!TKey, !!TValue&gt; valueFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TValue&gt; ^ valueFactory);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * Func&lt;'Key, 'Value&gt; -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="6440d-120">컬렉션에 포함된 키의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-120">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="6440d-121">컬렉션에 포함된 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-121">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-122">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-122">The variable or field to atomically update if the specified  is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="6440d-123">검색하거나 추가할 값의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-123">The key for the value to retrieve or add.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="6440d-124">키가 없는 경우 사전에 삽입할 값을 가져오기 위해 실행할 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-124">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span></span> <span data-ttu-id="6440d-125">이 대리자는 두 번 이상 호출되지 않습니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-125">This delegate will not be invoked more than once.</span></span></param>
        <summary><span data-ttu-id="6440d-126">사전에서 지정된 키의 값을 가져오거나, 키가 없는 경우 새 값을 사전에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-126">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="6440d-127">지정된 키의 값 또는 <paramref name="valueFactory" />(키가 없는 경우)입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-127">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * 'Value -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="6440d-128">컬렉션에 포함된 키의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-128">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="6440d-129">컬렉션에 포함된 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-129">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-130">지정된 키가 사전에 없는 경우 원자적으로 업데이트할 변수 또는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-130">The variable or field to atomically update if the specified key is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="6440d-131">가져오거나 추가할 값의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-131">The key for the value to get or add.</span></span></param>
        <param name="value"><span data-ttu-id="6440d-132">키가 없는 경우 사전에 추가할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-132">The value to add to the dictionary the key is not found.</span></span></param>
        <summary><span data-ttu-id="6440d-133">사전에서 지정된 키의 값을 가져오거나, 키가 없는 경우 새 값을 사전에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-133">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="6440d-134">지정된 키의 값 또는 <paramref name="valueFactory" />(키가 없는 경우)입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-134">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrAdd&lt;TKey,TValue,TArg&gt;">
      <MemberSignature Language="C#" Value="public static TValue GetOrAdd&lt;TKey,TValue,TArg&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, Func&lt;TKey,TArg,TValue&gt; valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TValue GetOrAdd&lt;TKey, TValue, TArg&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, class System.Func`3&lt;!!TKey, !!TArg, !!TValue&gt; valueFactory, !!TArg factoryArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrAdd(Of TKey, TValue, TArg) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, valueFactory As Func(Of TKey, TArg, TValue), factoryArgument As TArg) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue, typename TArg&gt;&#xA; static TValue GetOrAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, Func&lt;TKey, TArg, TValue&gt; ^ valueFactory, TArg factoryArgument);" />
      <MemberSignature Language="F#" Value="static member GetOrAdd :  * 'Key * Func&lt;'Key, 'Arg, 'Value&gt; * 'Arg -&gt; 'Value" Usage="System.Collections.Immutable.ImmutableInterlocked.GetOrAdd (location, key, valueFactory, factoryArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="valueFactory" Type="System.Func&lt;TKey,TArg,TValue&gt;" />
        <Parameter Name="factoryArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="6440d-135">컬렉션에 포함된 키의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-135">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="6440d-136">컬렉션에 포함된 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-136">The type of the values contained in the collection.</span></span></typeparam>
        <typeparam name="TArg">To be added.</typeparam>
        <param name="location"><span data-ttu-id="6440d-137">지정된 키가 사전에 없는 경우 업데이트할 변수 또는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-137">The variable or field to update if the specified is not in the dictionary.</span></span></param>
        <param name="key"><span data-ttu-id="6440d-138">검색하거나 추가할 값의 키입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-138">The key for the value to retrieve or add.</span></span></param>
        <param name="valueFactory"><span data-ttu-id="6440d-139">키가 없는 경우 사전에 삽입할 값을 가져오기 위해 실행할 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-139">The function to execute to obtain the value to insert into the dictionary if the key is not found.</span></span></param>
        <param name="factoryArgument"><span data-ttu-id="6440d-140">값 팩터리에 전달할 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-140">The argument to pass to the value factory.</span></span></param>
        <summary><span data-ttu-id="6440d-141">사전에서 지정된 키의 값을 가져오거나, 키가 없는 경우 새 값을 사전에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-141">Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</span></span></summary>
        <returns><span data-ttu-id="6440d-142">지정된 키의 값 또는 <paramref name="valueFactory" />(키가 없는 경우)입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-142">The value at the specified key or <paramref name="valueFactory" /> if the key was not present.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedCompareExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedCompareExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value, System.Collections.Immutable.ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedCompareExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedCompareExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T), comparand As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedCompareExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value, System::Collections::Immutable::ImmutableArray&lt;T&gt; comparand);" />
      <MemberSignature Language="F#" Value="static member InterlockedCompareExchange :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange (location, value, comparand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
        <Parameter Name="comparand" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6440d-143">배열에 의해 저장되는 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-143">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-144"><paramref name="comparand" />와 비교하여 바뀔 수 있는 값을 가진 대상입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-144">The destination, whose value is compared with <paramref name="comparand" /> and possibly replaced.</span></span></param>
        <param name="value"><span data-ttu-id="6440d-145">비교 결과가 같은 경우 대상 값을 바꿀 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-145">The value that replaces the destination value if the comparison results in equality.</span></span></param>
        <param name="comparand"><span data-ttu-id="6440d-146"><paramref name="location" />의 값과 비교할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-146">The value that is compared to the value at <paramref name="location" />.</span></span></param>
        <summary><span data-ttu-id="6440d-147">변경할 수 없는 두 배열이 같은지 비교하여 같으면 배열 중 하나를 바꿉니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-147">Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.</span></span></summary>
        <returns><span data-ttu-id="6440d-148"><paramref name="location" />의 원래 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-148">The original value in <paramref name="location" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedExchange&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Immutable.ImmutableArray&lt;T&gt; InterlockedExchange&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; InterlockedExchange&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedExchange(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As ImmutableArray(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Immutable::ImmutableArray&lt;T&gt; InterlockedExchange(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedExchange :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; System.Collections.Immutable.ImmutableArray&lt;'T&gt;" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.ImmutableArray&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6440d-149">배열에 의해 저장되는 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-149">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-150">지정된 값으로 설정할 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-150">The array to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="6440d-151"><paramref name="location" /> 매개 변수의 설정 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-151">The value to which the <paramref name="location" /> parameter is set.</span></span></param>
        <summary><span data-ttu-id="6440d-152">원자 단위 연산으로 배열을 지정된 배열로 설정하고 참조를 원래 배열로 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-152">Sets an array to the specified array and returns a reference to the original array, as an atomic operation.</span></span></summary>
        <returns><span data-ttu-id="6440d-153"><paramref name="location" />의 원래 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-153">The original value of <paramref name="location" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterlockedInitialize&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool InterlockedInitialize&lt;T&gt; (ref System.Collections.Immutable.ImmutableArray&lt;T&gt; location, System.Collections.Immutable.ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool InterlockedInitialize&lt;T&gt;(valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt;&amp; location, valuetype System.Collections.Immutable.ImmutableArray`1&lt;!!T&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function InterlockedInitialize(Of T) (ByRef location As ImmutableArray(Of T), value As ImmutableArray(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool InterlockedInitialize(System::Collections::Immutable::ImmutableArray&lt;T&gt; % location, System::Collections::Immutable::ImmutableArray&lt;T&gt; value);" />
      <MemberSignature Language="F#" Value="static member InterlockedInitialize :  * System.Collections.Immutable.ImmutableArray&lt;'T&gt; -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="System.Collections.Immutable.ImmutableArray&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6440d-154">배열에 의해 저장되는 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-154">The type of element stored by the array.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-155">지정된 값으로 설정할 배열입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-155">The array to set to the specified value.</span></span></param>
        <param name="value"><span data-ttu-id="6440d-156">매개 변수가 초기화되지 않은 경우 <paramref name="location" /> 매개 변수의 설정 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-156">The value to which the <paramref name="location" /> parameter is set, if it's not initialized.</span></span></param>
        <summary><span data-ttu-id="6440d-157">배열이 초기화되지 않은 경우 배열을 지정된 배열로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-157">Sets an array to the specified array if the array has not been initialized.</span></span></summary>
        <returns><span data-ttu-id="6440d-158">배열에 지정된 값이 할당되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-158"><see langword="true" /> if the array was assigned the specified value;  otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Push&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Push&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Push&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Push(Of T) (ByRef location As ImmutableStack(Of T), value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static void Push(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, T value);" />
      <MemberSignature Language="F#" Value="static member Push :  * 'T -&gt; unit" Usage="System.Collections.Immutable.ImmutableInterlocked.Push (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6440d-159">스택에 있는 항목의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-159">The type of items in the stack.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-160">업데이트할 스택입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-160">The stack to update.</span></span></param>
        <param name="value"><span data-ttu-id="6440d-161">스택에 푸시할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-161">The value to push on the stack.</span></span></param>
        <summary><span data-ttu-id="6440d-162">새 요소를 스택에 푸시합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-162">Pushes a new element onto the stack.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryAdd&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryAdd&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryAdd&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryAdd(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryAdd(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue value);" />
      <MemberSignature Language="F#" Value="static member TryAdd :  * 'Key * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryAdd (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="6440d-163">컬렉션에 포함된 키의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-163">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="6440d-164">컬렉션에 포함된 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-164">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-165">지정한 키와 값으로 업데이트할 사전입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-165">The dictionary to update with the specified key and value.</span></span></param>
        <param name="key"><span data-ttu-id="6440d-166">사전에 아직 정의되지 않은 경우 추가할 키입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-166">The key to add, if is not already defined in the dictionary.</span></span></param>
        <param name="value"><span data-ttu-id="6440d-167">추가할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-167">The value to add.</span></span></param>
        <summary><span data-ttu-id="6440d-168">키가 사전에 없는 경우 지정된 키와 값을 사전에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-168">Adds the specified key and value to the dictionary if the key is not in the dictionary.</span></span></summary>
        <returns><span data-ttu-id="6440d-169">키가 사전에 있으면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-169"><see langword="true" /> if the key is not in the dictionary; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryDequeue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryDequeue&lt;T&gt; (ref System.Collections.Immutable.ImmutableQueue&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryDequeue&lt;T&gt;(class System.Collections.Immutable.ImmutableQueue`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryDequeue(Of T) (ByRef location As ImmutableQueue(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryDequeue(System::Collections::Immutable::ImmutableQueue&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryDequeue :  *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryDequeue (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableQueue&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6440d-170">큐에 있는 항목의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-170">The type of items in the queue.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-171">원자적으로 업데이트할 변수 또는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-171">The variable or field to atomically update.</span></span></param>
        <param name="value"><span data-ttu-id="6440d-172">큐가 비어 있지 않은 경우 큐의 헤드에 있는 값으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-172">Set to the value from the head of the queue, if the queue not empty.</span></span></param>
        <summary><span data-ttu-id="6440d-173">큐가 비어 있지 않은 경우 큐의 헤드에서 지정된 요소를 원자적으로 제거하고 반환합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-173">Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.</span></span></summary>
        <returns><span data-ttu-id="6440d-174">큐가 비어 있지 않고 헤드 요소가 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-174"><see langword="true" /> if the queue is not empty and the head element is removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryPop&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryPop&lt;T&gt; (ref System.Collections.Immutable.ImmutableStack&lt;T&gt; location, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryPop&lt;T&gt;(class System.Collections.Immutable.ImmutableStack`1&lt;!!T&gt;&amp; location, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryPop(Of T) (ByRef location As ImmutableStack(Of T), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryPop(System::Collections::Immutable::ImmutableStack&lt;T&gt; ^ % location, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryPop :  *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryPop (location, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableStack&lt;T&gt;" RefType="ref" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6440d-175">스택에 있는 항목의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-175">The type of items in the stack.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-176">업데이트할 스택입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-176">The stack to update.</span></span></param>
        <param name="value"><span data-ttu-id="6440d-177">스택이 비어 있지 않은 경우 스택에서 제거된 값을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-177">Receives the value removed from the stack, if the stack is not empty.</span></span></param>
        <summary><span data-ttu-id="6440d-178">스택의 맨 위에 제거할 요소가 있는 경우 해당 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-178">Removes an element from the top of the stack, if there is an element to remove.</span></span></summary>
        <returns><span data-ttu-id="6440d-179">스택에서 요소가 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-179"><see langword="true" /> if an element is removed from the stack; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRemove&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRemove&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRemove&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, [out] !!TValue&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRemove(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, ByRef value As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryRemove(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, [Runtime::InteropServices::Out] TValue % value);" />
      <MemberSignature Language="F#" Value="static member TryRemove :  * 'Key *  -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryRemove (location, key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="6440d-180">컬렉션에 포함된 키의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-180">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="6440d-181">컬렉션에 포함된 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-181">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-182">업데이트할 사전입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-182">The dictionary to update.</span></span></param>
        <param name="key"><span data-ttu-id="6440d-183">제거할 키입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-183">The key to remove.</span></span></param>
        <param name="value"><span data-ttu-id="6440d-184">사전이 비어 있지 않은 경우 제거된 항목의 값을 받습니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-184">Receives the value of the removed item, if the dictionary is not empty.</span></span></param>
        <summary><span data-ttu-id="6440d-185">키가 있는 경우 지정된 키를 가진 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-185">Removes the element with the specified key, if the key exists.</span></span></summary>
        <returns><span data-ttu-id="6440d-186">키를 찾아서 제거했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-186"><see langword="true" /> if the key was found and removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryUpdate&lt;TKey,TValue&gt;">
      <MemberSignature Language="C#" Value="public static bool TryUpdate&lt;TKey,TValue&gt; (ref System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt; location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryUpdate&lt;TKey, TValue&gt;(class System.Collections.Immutable.ImmutableDictionary`2&lt;!!TKey, !!TValue&gt;&amp; location, !!TKey key, !!TValue newValue, !!TValue comparisonValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryUpdate(Of TKey, TValue) (ByRef location As ImmutableDictionary(Of TKey, TValue), key As TKey, newValue As TValue, comparisonValue As TValue) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey, typename TValue&gt;&#xA; static bool TryUpdate(System::Collections::Immutable::ImmutableDictionary&lt;TKey, TValue&gt; ^ % location, TKey key, TValue newValue, TValue comparisonValue);" />
      <MemberSignature Language="F#" Value="static member TryUpdate :  * 'Key * 'Value * 'Value -&gt; bool" Usage="System.Collections.Immutable.ImmutableInterlocked.TryUpdate (location, key, newValue, comparisonValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="System.Collections.Immutable.ImmutableDictionary&lt;TKey,TValue&gt;" RefType="ref" />
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="newValue" Type="TValue" />
        <Parameter Name="comparisonValue" Type="TValue" />
      </Parameters>
      <Docs>
        <typeparam name="TKey"><span data-ttu-id="6440d-187">컬렉션에 포함된 키의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-187">The type of the keys contained in the collection.</span></span></typeparam>
        <typeparam name="TValue"><span data-ttu-id="6440d-188">컬렉션에 포함된 값의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-188">The type of the values contained in the collection.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-189">업데이트할 사전입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-189">The dictionary to update.</span></span></param>
        <param name="key"><span data-ttu-id="6440d-190">업데이트할 키입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-190">The key to update.</span></span></param>
        <param name="newValue"><span data-ttu-id="6440d-191">설정할 새 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-191">The new value to set.</span></span></param>
        <param name="comparisonValue"><span data-ttu-id="6440d-192">업데이트에 성공하기 위한 <paramref name="key" />의 현재 값입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-192">The current value for <paramref name="key" /> in order for the update to succeed.</span></span></param>
        <summary><span data-ttu-id="6440d-193">지정된 키가 특정 값으로 이미 설정된 경우 지정된 키를 지정된 값으로 설정합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-193">Sets the specified key to the specified value if the specified key already is set to a specific value.</span></span></summary>
        <returns><span data-ttu-id="6440d-194"><paramref name="key" /> 및 <paramref name="comparisonValue" />가 사전에 있고 비교가 <paramref name="newValue" />로 업데이트되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-194"><see langword="true" /> if <paramref name="key" /> and <paramref name="comparisonValue" /> are present in the dictionary and comparison was updated to <paramref name="newValue" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T&gt; (ref T location, Func&lt;T,T&gt; transformer) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T&gt;(!!T&amp; location, class System.Func`2&lt;!!T, !!T&gt; transformer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class) (ByRef location As T, transformer As Func(Of T, T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, T&gt; ^ transformer);" />
      <MemberSignature Language="F#" Value="static member Update :  * Func&lt;'T, 'T (requires 'T : null and 'T : null)&gt; -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6440d-195">데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-195">The type of data.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-196">여러 스레드에서 액세스할 수 있는 변경될 변수 또는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-196">The variable or field to be changed, which may be accessed by multiple threads.</span></span></param>
        <param name="transformer"><span data-ttu-id="6440d-197">값을 변경하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-197">A function that mutates the value.</span></span> <span data-ttu-id="6440d-198">이 함수는 다른 스레드에서 레이스가 발생하는 경우 여러 번 실행할 수 있으므로 부작용이 없어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-198">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span></span></param>
        <summary><span data-ttu-id="6440d-199">지정된 변환 함수를 통해 낙관적 잠금 트랜잭션 의미 체계를 사용하여 준비된 값을 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-199">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span></span>             <span data-ttu-id="6440d-200">변환은 낙관적 잠금 레이스에서 이기기 위해 필요한 만큼 여러 번 다시 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-200">The transformation is retried as many times as necessary to win the optimistic locking race.</span></span></summary>
        <returns><span data-ttu-id="6440d-201"><paramref name="transformer" /> 함수의 결과를 적용하여 해당 위치 값이 변경되면 <c>true</c>이고 <paramref name="transformer" />의 마지막 호출이 기존 값을 반환하기 때문에 해당 위치 값이 동일하게 유지되면 <c>false</c>입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-201"><c>true</c> if the location's value is changed by applying the result of the              <paramref name="transformer" /> function;             <c>false</c> if the location's value remained the same because the last              invocation of <paramref name="transformer" /> returned the existing value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update&lt;T,TArg&gt;">
      <MemberSignature Language="C#" Value="public static bool Update&lt;T,TArg&gt; (ref T location, Func&lt;T,TArg,T&gt; transformer, TArg transformerArgument) where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Update&lt;class T, TArg&gt;(!!T&amp; location, class System.Func`3&lt;!!T, !!TArg, !!T&gt; transformer, !!TArg transformerArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Update(Of T As Class, TArg As Class) (ByRef location As T, transformer As Func(Of T, TArg, T), transformerArgument As TArg) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TArg&gt;&#xA; where T : class static bool Update(T % location, Func&lt;T, TArg, T&gt; ^ transformer, TArg transformerArgument);" />
      <MemberSignature Language="F#" Value="static member Update :  * Func&lt;'T, 'Arg, 'T (requires 'T : null and 'T : null)&gt; * 'Arg -&gt; bool (requires 'T : null)" Usage="System.Collections.Immutable.ImmutableInterlocked.Update (location, transformer, transformerArgument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TArg" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="location" Type="T" RefType="ref" />
        <Parameter Name="transformer" Type="System.Func&lt;T,TArg,T&gt;" />
        <Parameter Name="transformerArgument" Type="TArg" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="6440d-202">데이터 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-202">The type of data.</span></span></typeparam>
        <typeparam name="TArg"><span data-ttu-id="6440d-203">에 전달 된 인수 형식이 <paramref name="transformer" />합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-203">The type of argument passed to the <paramref name="transformer" />.</span></span></typeparam>
        <param name="location"><span data-ttu-id="6440d-204">여러 스레드에서 액세스할 수 있는 변경될 변수 또는 필드입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-204">The variable or field to be changed, which may be accessed by multiple threads.</span></span></param>
        <param name="transformer"><span data-ttu-id="6440d-205">값을 변경하는 함수입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-205">A function that mutates the value.</span></span> <span data-ttu-id="6440d-206">이 함수는 다른 스레드에서 레이스가 발생하는 경우 여러 번 실행할 수 있으므로 부작용이 없어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-206">This function should be side-effect free,              as it may run multiple times when races occur with other threads.</span></span></param>
        <param name="transformerArgument"><span data-ttu-id="6440d-207"><paramref name="transformer" />에 전달할 인수입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-207">The argument to pass to <paramref name="transformer" />.</span></span></param>
        <summary><span data-ttu-id="6440d-208">지정된 변환 함수를 통해 낙관적 잠금 트랜잭션 의미 체계를 사용하여 준비된 값을 변경합니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-208">Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.</span></span>             <span data-ttu-id="6440d-209">변환은 낙관적 잠금 레이스에서 이기기 위해 필요한 만큼 여러 번 다시 시도됩니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-209">The transformation is retried as many times as necessary to win the optimistic locking race.</span></span></summary>
        <returns><span data-ttu-id="6440d-210"><paramref name="transformer" /> 함수의 결과를 적용하여 해당 위치 값이 변경되면 <c>true</c>이고 <paramref name="transformer" />의 마지막 호출이 기존 값을 반환하기 때문에 해당 위치 값이 동일하게 유지되면 <c>false</c>입니다.</span><span class="sxs-lookup"><span data-stu-id="6440d-210"><c>true</c> if the location's value is changed by applying the result of the              <paramref name="transformer" /> function;             <c>false</c> if the location's value remained the same because the last              invocation of <paramref name="transformer" /> returned the existing value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>