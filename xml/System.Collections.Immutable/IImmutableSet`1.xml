<Type Name="IImmutableSet&lt;T&gt;" FullName="System.Collections.Immutable.IImmutableSet&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="feec8cbc6a7b01cac5c90daca034bb9431dc8666" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ko-KR" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56362192" /></Metadata><TypeSignature Language="C#" Value="public interface IImmutableSet&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IImmutableSet`1&lt;T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.IImmutableSet`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IImmutableSet(Of T)&#xA;Implements IEnumerable(Of T), IReadOnlyCollection(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IImmutableSet : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type IImmutableSet&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.1.37.0</AssemblyVersion>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
    <AssemblyVersion>1.2.4.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="62ae8-101">집합에 저장된 요소의 형식입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-101">The type of element stored in the set.</span></span></typeparam>
    <summary><span data-ttu-id="62ae8-102">집합의 새 인스턴스를 만드는 방식으로만 수정할 수 있는 요소 집합을 나타냅니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-102">Represents a set of elements that can only be modified by creating a new instance of the set.</span></span>  
  
 <span data-ttu-id="62ae8-103">**NuGet 패키지**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see>(<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">변경할 수 없는 컬렉션 정보 및 설치 방법</see>)</span><span class="sxs-lookup"><span data-stu-id="62ae8-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62ae8-104">이 집합에는 변경이 새 집합을 생성 합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-104">Mutations on this set generate new sets.</span></span> <span data-ttu-id="62ae8-105">증분 변경 집합에 더 이상 참조 되지 않는 모든 고유 집합 데이터를 정리 가비지 수집을 허용 하는 동안 집합의 이전 버전을 사용 하 여 최대한 많은 메모리를 공유 합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-105">Incremental changes to a set share as much memory as possible with the prior versions of a set, while allowing garbage collection to clean up any unique set data that is no longer being referenced.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableSet&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As IImmutableSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ Add(T value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; System.Collections.Immutable.IImmutableSet&lt;'T&gt;" Usage="iImmutableSet.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="62ae8-106">추가할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-106">The element to add.</span></span></param>
        <summary><span data-ttu-id="62ae8-107">지정한 요소를 이 변경할 수 없는 집합에 추가합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-107">Adds the specified element to this immutable set.</span></span></summary>
        <returns><span data-ttu-id="62ae8-108">요소가 추가된 새 집합입니다. 해당 요소가 집합에 이미 있는 경우 이 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-108">A new set with the element added, or this set if the element is already in the set.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableSet&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As IImmutableSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; System.Collections.Immutable.IImmutableSet&lt;'T&gt;" Usage="iImmutableSet.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="62ae8-109">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 변경할 수 없는 빈 집합을 검색합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-109">Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.</span></span></summary>
        <returns><span data-ttu-id="62ae8-110">정렬 및 순서 의미 체계가 이 인스턴스와 동일한 빈 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-110">An empty set that has the same sorting and ordering semantics as this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(T value);" />
      <MemberSignature Language="F#" Value="abstract member Contains : 'T -&gt; bool" Usage="iImmutableSet.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="62ae8-111">집합에서 찾을 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-111">The element to locate in the set.</span></span></param>
        <summary><span data-ttu-id="62ae8-112">이 변경할 수 없는 집합에 지정한 요소가 들어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-112">Determines whether this immutable set contains a specified element.</span></span></summary>
        <returns><span data-ttu-id="62ae8-113">집합에 지정된 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-113"><see langword="true" /> if the set contains the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableSet&lt;T&gt; Except (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; Except(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (other As IEnumerable(Of T)) As IImmutableSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Except : seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableSet&lt;'T&gt;" Usage="iImmutableSet.Except other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="62ae8-114">이 집합에서 제거할 항목의 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-114">The collection of items to remove from this set.</span></span></param>
        <summary><span data-ttu-id="62ae8-115">현재 변경할 수 없는 집합에서 지정된 컬렉션의 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-115">Removes the elements in the specified collection from the current immutable set.</span></span></summary>
        <returns><span data-ttu-id="62ae8-116">항목이 제거된 새 집합입니다. 집합에 항목이 없는 경우 원래 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-116">A new set with the items removed; or the original set if none of the items were in the set.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableSet&lt;T&gt; Intersect (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; Intersect(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (other As IEnumerable(Of T)) As IImmutableSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Intersect : seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableSet&lt;'T&gt;" Usage="iImmutableSet.Intersect other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="62ae8-117">현재 <see cref="T:System.Collections.Immutable.IImmutableSet`1" />과 비교할 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-117">The collection to compare to the current <see cref="T:System.Collections.Immutable.IImmutableSet`1" />.</span></span></param>
        <summary><span data-ttu-id="62ae8-118">이 집합과 지정된 집합에 존재하는 요소만 포함된 변경할 수 없는 집합을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-118">Creates an immutable set that contains only elements that exist in this set and the specified set.</span></span></summary>
        <returns><span data-ttu-id="62ae8-119">두 집합 모두에 존재하는 요소가 포함된 변경할 수 없는 새 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-119">A new immutable set that contains elements that exist in both sets.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProperSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsProperSubsetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsProperSubsetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsProperSubsetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsProperSubsetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsProperSubsetOf : seq&lt;'T&gt; -&gt; bool" Usage="iImmutableSet.IsProperSubsetOf other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="62ae8-120">현재 집합과 비교할 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-120">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="62ae8-121">현재 변경할 수 없는 집합이 지정된 컬렉션의 적절한(고급) 하위 집합인지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-121">Determines whether the current immutable set is a proper (strict) subset of the specified collection.</span></span></summary>
        <returns><span data-ttu-id="62ae8-122">현재 집합이 지정된 컬렉션의 적절한 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-122"><see langword="true" /> if the current set is a proper subset of the specified collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62ae8-123">현재 집합의 적절 한 하위 집합이 면 `other`, `other` 현재 집합에 없는 하나 이상의 요소가 있어야 합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-123">If the current set is a proper subset of `other`, `other` must have at least one element that the current set does not have.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProperSupersetOf">
      <MemberSignature Language="C#" Value="public bool IsProperSupersetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsProperSupersetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsProperSupersetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsProperSupersetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsProperSupersetOf : seq&lt;'T&gt; -&gt; bool" Usage="iImmutableSet.IsProperSupersetOf other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="62ae8-124">현재 집합과 비교할 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-124">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="62ae8-125">현재 변경할 수 없는 집합이 지정된 컬렉션의 적절한(고급) 상위 집합인지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-125">Determines whether the current immutable set is a proper (strict) superset of the specified collection.</span></span></summary>
        <returns><span data-ttu-id="62ae8-126">현재 집합이 지정된 컬렉션의 적절한 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 false입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-126"><see langword="true" /> if the current set is a proper superset of the specified collection; otherwise, false.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62ae8-127">현재 집합의 진 이면 `other`, 현재 집합에는 하나 이상의 요소가 있어야 합니다.는 `other` 없습니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-127">If the current set is a proper superset of `other`, the current set must have at least one element that `other` does not have.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubsetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSubsetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsSubsetOf : seq&lt;'T&gt; -&gt; bool" Usage="iImmutableSet.IsSubsetOf other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="62ae8-128">현재 집합과 비교할 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-128">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="62ae8-129">현재 변경할 수 없는 집합이 지정된 컬렉션의 하위 집합인지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-129">Determines whether the current immutable set is a subset of a specified collection.</span></span></summary>
        <returns><span data-ttu-id="62ae8-130">현재 집합이 지정된 컬렉션의 하위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-130"><see langword="true" /> if the current set is a subset of the specified collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupersetOf">
      <MemberSignature Language="C#" Value="public bool IsSupersetOf (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupersetOf(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSupersetOf (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSupersetOf(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member IsSupersetOf : seq&lt;'T&gt; -&gt; bool" Usage="iImmutableSet.IsSupersetOf other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="62ae8-131">현재 집합과 비교할 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-131">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="62ae8-132">현재 변경할 수 없는 집합이 지정된 컬렉션의 상위 집합인지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-132">Determines whether the current immutable set is a superset of a specified collection.</span></span></summary>
        <returns><span data-ttu-id="62ae8-133">현재 집합이 지정된 컬렉션의 상위 집합이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-133"><see langword="true" /> if the current set is a superset of the specified collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlaps">
      <MemberSignature Language="C#" Value="public bool Overlaps (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Overlaps(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Overlaps (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Overlaps(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Overlaps : seq&lt;'T&gt; -&gt; bool" Usage="iImmutableSet.Overlaps other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="62ae8-134">현재 집합과 비교할 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-134">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="62ae8-135">현재 변경할 수 없는 집합이 지정된 컬렉션과 겹치는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-135">Determines whether the current immutable set overlaps with the specified collection.</span></span></summary>
        <returns><span data-ttu-id="62ae8-136">현재 집합과 지정된 컬렉션이 하나 이상 공통 요소를 공유하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-136"><see langword="true" /> if the current set and the specified collection share at least one common element; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableSet&lt;T&gt; Remove (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; Remove(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T) As IImmutableSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ Remove(T value);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T -&gt; System.Collections.Immutable.IImmutableSet&lt;'T&gt;" Usage="iImmutableSet.Remove value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="62ae8-137">제거할 요소입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-137">The element to remove.</span></span></param>
        <summary><span data-ttu-id="62ae8-138">이 변경할 수 없는 집합에서 지정된 요소를 제거합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-138">Removes the specified element from this immutable set.</span></span></summary>
        <returns><span data-ttu-id="62ae8-139">지정된 요소가 제거된 새 집합입니다. 집합에서 요소를 찾을 수 없는 경우 현재 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-139">A new set with the specified element removed, or the current set if the element cannot be found in the set.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEquals">
      <MemberSignature Language="C#" Value="public bool SetEquals (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetEquals(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SetEquals (other As IEnumerable(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SetEquals(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member SetEquals : seq&lt;'T&gt; -&gt; bool" Usage="iImmutableSet.SetEquals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="62ae8-140">현재 집합과 비교할 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-140">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="62ae8-141">현재 변경할 수 없는 집합과 지정된 컬렉션에 같은 요소가 들어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-141">Determines whether the current immutable set and the specified collection contain the same elements.</span></span></summary>
        <returns><span data-ttu-id="62ae8-142">집합이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-142"><see langword="true" /> if the sets are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymmetricExcept">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableSet&lt;T&gt; SymmetricExcept (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; SymmetricExcept(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function SymmetricExcept (other As IEnumerable(Of T)) As IImmutableSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ SymmetricExcept(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member SymmetricExcept : seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableSet&lt;'T&gt;" Usage="iImmutableSet.SymmetricExcept other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="62ae8-143">현재 집합과 비교할 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-143">The collection to compare to the current set.</span></span></param>
        <summary><span data-ttu-id="62ae8-144">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소만 포함하는 변경할 수 없는 집합을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-144">Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.</span></span></summary>
        <returns><span data-ttu-id="62ae8-145">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 요소를 포함하는 새 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-145">A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (T equalValue, out T actualValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!T equalValue, [out] !T&amp; actualValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetValue (equalValue As T, ByRef actualValue As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetValue(T equalValue, [Runtime::InteropServices::Out] T % actualValue);" />
      <MemberSignature Language="F#" Value="abstract member TryGetValue : 'T *  -&gt; bool" Usage="iImmutableSet.TryGetValue (equalValue, actualValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="equalValue" Type="T" />
        <Parameter Name="actualValue" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <param name="equalValue"><span data-ttu-id="62ae8-146">검색할 값입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-146">The value to search for.</span></span></param>
        <param name="actualValue"><span data-ttu-id="62ae8-147">집합에 일치하는 값이 있으면 해당 값이고, 일치하는 값이 없으면 <c>equalvalue</c>입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-147">The matching value from the set, if found, or <c>equalvalue</c> if there are no matches.</span></span></param>
        <summary><span data-ttu-id="62ae8-148">집합에 지정된 값이 들어 있는지 여부를 확인합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-148">Determines whether the set contains a specified value.</span></span></summary>
        <returns><span data-ttu-id="62ae8-149">일치하는 값이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-149"><see langword="true" /> if a matching value was found; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62ae8-150">다음은 몇 가지 시나리오는 <xref:System.Collections.Immutable.IImmutableSet%601.TryGetValue%2A> 유용할 수 있습니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-150">Following are some scenarios where <xref:System.Collections.Immutable.IImmutableSet%601.TryGetValue%2A> may be useful:</span></span>  
  
-   <span data-ttu-id="62ae8-151">새 참조를 만드는 대신 이전에 저장 된 개체 참조를 다시 사용 하려고 합니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-151">You want to reuse a previously stored object reference instead of creating a new reference.</span></span>  
  
-   <span data-ttu-id="62ae8-152">개체에 대 한 자세한 데이터를 검색.</span><span class="sxs-lookup"><span data-stu-id="62ae8-152">You want to retrieve more complete data about an object</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableSet&lt;T&gt; Union (System.Collections.Generic.IEnumerable&lt;T&gt; other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableSet`1&lt;!T&gt; Union(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (other As IEnumerable(Of T)) As IImmutableSet(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableSet&lt;T&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;T&gt; ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Union : seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableSet&lt;'T&gt;" Usage="iImmutableSet.Union other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.1.37.0</AssemblyVersion>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
        <AssemblyVersion>1.2.4.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableSet&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="62ae8-153">요소를 추가할 컬렉션입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-153">The collection to add elements from.</span></span></param>
        <summary><span data-ttu-id="62ae8-154">현재 집합과 지정된 컬렉션 둘 중 하나에만 있는 모든 요소를 포함하는 변경할 수 없는 새 집합을 만듭니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-154">Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.</span></span></summary>
        <returns><span data-ttu-id="62ae8-155">항목이 추가된 변경할 수 없는 새 집합입니다. 모든 항목이 집합에 이미 있던 경우 원래 집합입니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-155">A new immutable set with the items added; or the original set if all the items were already in the set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="62ae8-156">중복 요소에 포함 된 `other` 무시 됩니다.</span><span class="sxs-lookup"><span data-stu-id="62ae8-156">Any duplicate elements contained in `other` are ignored.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>